server:
  port: 0

spring:
  application:
    name: order-service
#  h2:
#    console:
#      enabled: true
#      settings:
#        web-allow-others: true
#      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create
  datasource:
    driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
    url: jdbc:tc:mysql:8://testdb
    username: sa
    password:
  #    driver-class-name: org.mariadb.jdbc.Driver
  #    url: jdbc:mariadb://localhost:3306/mydb
  #    username: root
  #    password: test1357
  kafka:
    consumer:
      bootstrap-servers: localhost:9092 # 로컬에서만. 도커에서는 환경변수로.
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
    producer:
      bootstrap-servers: localhost:9092 # 로컬에서만. 도커에서는 환경변수로.
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    listener:
      ack-mode: manual


order-service:
  service-name: order-service
  order-created-event-topic-name: order-created-event

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  order-consumer-group-id: order-topic-consumer
  catalog-consumer-group-id: catalog-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka

logging:
  level:
    net.spring.cloud.prototype.orderservice: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health, httptrace, info, metrics, prometheus
